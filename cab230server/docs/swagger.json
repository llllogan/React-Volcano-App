{
  "openapi": "3.0.3",
  "info": {
    "version": "2.0.0",
    "title": "Volcanoes around the world v2",
    "description": "This Swagger document has been modified with my additions. This API has been created to support assignment three in CAB230, Web Computing. It exposes a number of REST endpoints which implement CRUD operations on a database containing publicly available data about volcanoes collated by the Smithsonian Institution's Global Volcanism Program. The API endpoints and their usage are described in detail below."
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "Enter JWT Bearer token **_only_**"
      }
    },
    "schemas": {
      "VolcanoReview": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1
          },
          "userId": {
            "type": "number",
            "example": 1
          },
          "title": {
            "type": "string",
            "example": "Great volcano!"
          },
          "rating": {
            "type": "number",
            "example": 5
          },
          "comment": {
            "type": "string",
            "example": "This volcano was fantastic to climb. Avoid the lava!"
          },
          "date": {
            "type": "string",
            "example": "2024-05-27T14:00:00.000Z"
          }
        }
      },
      "InvalidQueryParameters": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Invalid query parameters. Query parameters are not permitted."
          }
        }
      },
      "SupplyOneQueryParameter": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Please supply only one query parameter with an option 'exactMatch' flag."
          }
        }
      },
      "SupplyValidQueryParameter": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Please supply a valid query parameter (name, volcano, region, subregion)."
          }
        }
      },
      "RequestBodyIncompleteEmailPassword": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Request body incomplete, both email and password are required."
          }
        }
      },
      "RequestBodyIncompleteProfile": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Request body incomplete: firstName, lastName, dob and address are required."
          }
        }
      },
      "ReviewMissingRequiredFields": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Review is missing required fields."
          }
        }
      },
      "UserProfileUpdateFailure": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "An error occurred updating the user profile."
          }
        }
      },
      "SqlError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "SQL error. Please check payload."
          }
        }
      },
      "ReviewUpdatePayloadIncomplete": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Review update payload must have at least one field."
          }
        }
      },
      "CountryRequiredQueryParameter": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Country is a required query parameter."
          }
        }
      },
      "InvalidQueryParametersCountryPopulatedWithin": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Invalid query parameters. Only country and populatedWithin are permitted."
          }
        }
      },
      "InvalidValueForPopulatedWithin": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Invalid value for populatedWithin. Only: 5km, 10km, 30km, 100km are permitted."
          }
        }
      },
      "InvalidJwtToken": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Invalid JWT token."
          }
        }
      },
      "JwtTokenExpired": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "JWT token has expired."
          }
        }
      },
      "AuthorizationHeaderMalformed": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Authorization header is malformed."
          }
        }
      },
      "AuthorizationHeaderNotFound": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Authorization header ('Bearer token') not found."
          }
        }
      },
      "IncorrectEmailOrPassword": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Incorrect email or password."
          }
        }
      },
      "Forbidden": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Forbidden."
          }
        }
      },
      "UserNotFound": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "User not found."
          }
        }
      },
      "VolcanoNotFound": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Volcano with ID: 99 not found."
          }
        }
      },
      "ReviewNotFound": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Review with ID: 11 not found."
          }
        }
      },
      "ReviewDoesNotBelongToVolcano": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Review with ID: 11 does not belong to volcano with ID: 99."
          }
        }
      },
      "UserAlreadyExists": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "User already exists."
          }
        }
      },
      "TeapotError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "I cannot brew coffee as I am a teapot."
          },
          "link": {
            "type": "string",
            "example": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/418"
          
          }
        }
      },
      "PublicProfile": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "mike@gmail.com"
          },
          "firstName": {
            "type": "string",
            "example": "Michael"
          },
          "lastName": {
            "type": "string",
            "example": "Jordan"
          }
        }
      },
      "AuthenticatedProfile": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "mike@gmail.com"
          },
          "firstName": {
            "type": "string",
            "example": "Michael"
          },
          "lastName": {
            "type": "string",
            "example": "Jordan"
          },
          "dob": {
            "type": "string",
            "example": "1963-02-17"
          },
          "address": {
            "type": "string",
            "example": "123 Fake Street, Springfield"
          }
        }
      }
    }
  },
  "paths": {
    "/countries": {
      "get": {
        "tags": ["Country"],
        "description": "Returns a list of all countries that are associated with one or more volcanoes, ordered alphabetically.",
        "responses": {
          "200": {
            "description": "An array of countries. An example of the first five elements in the array is shown below.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "Algeria",
                    "Antarctica",
                    "Argentina",
                    "Armenia",
                    "Australia"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidQueryParameters"
                }
              }
            }
          }
        }
      }
    },
    "/countries/filter": {
      "get": {
        "tags": ["Country"],
        "summary": "New! - with query parameter",
        "description": "Returns a subset of the list of countries, filtered by the query parameter. The query parameter can be any of the following: volcano, region, subregion, name. With an option paramater of exactMatch which is optional and defaults to false. If exactMatch is set to true, the search will look for exact matches. If exactMatch is set to false, the search will look for fuzzy matches. If no query parameters are supplied, the route will return the full list of countries.",
        "parameters": [
          {
            "name": "volcano",
            "description": "Search for countries with this volcano name.",
            "in": "query",
            "required": false,
            "schema": {}
          },
          {
            "name": "region",
            "description": "Search for countries which contain this region.",
            "in": "query",
            "required": false,
            "schema": {}
          },
          {
            "name": "subregion",
            "description": "Search for countries which contain this subregion.",
            "in": "query",
            "required": false,
            "schema": {}
          },
          {
            "name": "name",
            "description": "Search for countries by their name.",
            "in": "query",
            "required": false,
            "schema": {}
          },
          {
            "name": "exactMatch",
            "description": "A flag which can be supplied to change the search to either look for exact matches or fuzzy search. Default is false.",
            "in": "query",
            "required": false,
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "A subset of the list of countries, filtered by the query parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "Algeria",
                    "Antarctica",
                    "Argentina"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "An issue with the query paramaters which were supplied.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/SupplyOneQueryParameter"
                    },
                    {
                      "$ref": "#/components/schemas/SupplyValidQueryParameter"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/volcanoes": {
      "get": {
        "tags": ["Volcano"],
        "description": "Returns a list of volcanoes that are associated with the queried country. The country query parameter is required. The list can optionally be filtered by using the populatedWithin query parameter. This will return a filtered list of volcanoes that have at least one person living within the provided radius.",
        "parameters": [
          {
            "name": "country",
            "in": "query",
            "description": "Name of country",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "populatedWithin",
            "in": "query",
            "description": "Distance within X km of a volcano",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["5km", "10km", "30km", "100km"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of objects containing id, name, country, region and subregion properties. An example of one object in the array is shown below.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number",
                        "example": "1"
                      },
                      "name": {
                        "type": "string",
                        "example": "Abu"
                      },
                      "country": {
                        "type": "string",
                        "example": "Japan"
                      },
                      "region": {
                        "type": "string",
                        "example": "Japan, Taiwan, Marianas"
                      },
                      "subregion": {
                        "type": "string",
                        "example": "Honshu"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing country query parameter or query parameters invalid. Click on 'Schema' below to see the possible error responses.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/CountryRequiredQueryParameter"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidQueryParametersCountryPopulatedWithin"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidValueForPopulatedWithin"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/volcano/{id}": {
      "get": {
        "tags": ["Volcano"],
        "description": "Returns an object containing data for the queried volcano. If a valid JWT token is sent in the header of the request, population data for 5km, 10km, 30km and 100km is also provided. To test this using Swagger, click the green 'Authorize' button at the top of this page to enter your JWT token. A JWT token can be obtained by logging in. The path parameter (id) is required.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the volcano",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an object containing id, name, country, region, subregion, last eruption, summit, elevation, latitude and longitude data for the queried volcano. If a valid JWT token is sent in the header of the request, population data for 5km, 10km, 30km and 100km is also provided. An example of one object (with an authenticated request) is shown below.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 1
                    },
                    "name": {
                      "type": "string",
                      "example": "Abu"
                    },
                    "country": {
                      "type": "string",
                      "example": "Japan"
                    },
                    "region": {
                      "type": "string",
                      "example": "Japan, Taiwan, Marianas"
                    },
                    "subregion": {
                      "type": "string",
                      "example": "Honshu"
                    },
                    "last_eruption": {
                      "type": "string",
                      "example": "6850 BCE"
                    },
                    "summit": {
                      "type": "number",
                      "example": "641"
                    },
                    "elevation": {
                      "type": "number",
                      "example": "2103"
                    },
                    "latitude": {
                      "type": "string",
                      "example": "34.5000"
                    },
                    "longitude": {
                      "type": "string",
                      "example": "131.6000"
                    },
                    "population_5km": {
                      "type": "number",
                      "example": "3597"
                    },
                    "population_10km": {
                      "type": "number",
                      "example": "9594"
                    },
                    "population_30km": {
                      "type": "number",
                      "example": "117805"
                    },
                    "population_100km": {
                      "type": "number",
                      "example": "4071152"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidQueryParameters"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Click on 'Schema' below to see the possible error responses.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/InvalidJwtToken"
                    },
                    {
                      "$ref": "#/components/schemas/JwtTokenExpired"
                    },
                    {
                      "$ref": "#/components/schemas/AuthorizationHeaderMalformed"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Volcano ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VolcanoNotFound"
                }
              }
            }
          }
        }
      }
    },
    "/volcano/{id}/reviews": {
      "get": {
        "summary": "New!",
        "tags": ["Volcano"],
        "description": "Returns an array of reviews for the queried volcano. The path parameter (id) is required.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the volcano",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of objects containing id, name, rating, location, review and date properties. An example of one object in the array is shown below.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VolcanoReview"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Volcano ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/VolcanoNotFound"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "New!",
        "tags": ["Volcano"],
        "description": "Creates a new review for the queried volcano. The path parameter (id) is required. A request body containing the review to be created must be sent. This route requires the user to be authenticated - a valid JWT token must be sent in the header of the request. To test this route using Swagger, click the green 'Authorize' button at the top of this page to enter your JWT token. A JWT token can be obtained by logging in.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the volcano",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "An object containing the title, rating and comment of the review to be created.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Great volcano!"
                  },
                  "rating": {
                    "type": "number",
                    "example": 5
                  },
                  "comment": {
                    "type": "string",
                    "example": "This volcano was fantastic to climb. Avoid the lava!"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "Review successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VolcanoReview"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ReviewMissingRequiredFields"
                    },
                    {
                      "$ref": "#/components/schemas/SqlError"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Click on 'Schema' below to see the possible error responses.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/InvalidJwtToken"
                    },
                    {
                      "$ref": "#/components/schemas/JwtTokenExpired"
                    },
                    {
                      "$ref": "#/components/schemas/AuthorizationHeaderMalformed"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Volcano ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VolcanoNotFound"
                }
              }
            }
          }
        }
      }
    },
    "/volcano/{id}/reviews/{reviewId}": {
      "put": {
        "summary": "New! - with path parameter",
        "tags": ["Volcano"],
        "description": "Updates a review for the queried volcano. Both the (ID) and (reviewID) path parameters are required, both have to be valid and the review must have been placed against that volcano. A request body containing the updates to the review must be supplied. This route requires the user to be authenticated - a valid JWT token must be sent in the header of the request. The user who originally created the review must be the one to edit it, all requests made by other users will be forbidden. To test this route using Swagger, click the green 'Authorize' button at the top of this page to enter your JWT token. A JWT token can be obtained by logging in.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the volcano",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "description": "An object containing the title, rating and comment of the review to be updated.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Great volcano!"
                  },
                  "rating": {
                    "type": "number",
                    "example": 5
                  },
                  "comment": {
                    "type": "string",
                    "example": "This volcano was fantastic to climb. Avoid the lava!"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Review successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VolcanoReview"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ReviewUpdatePayloadIncomplete"
                    },
                    {
                      "$ref": "#/components/schemas/SqlError"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Click on 'Schema' below to see the possible error responses.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/InvalidJwtToken"
                    },
                    {
                      "$ref": "#/components/schemas/JwtTokenExpired"
                    },
                    {
                      "$ref": "#/components/schemas/AuthorizationHeaderMalformed"
                    },
                    {
                      "$ref": "#/components/schemas/AuthorizationHeaderNotFound"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. Click on 'Schema' below to see the possible error responses.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "Review ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ReviewNotFound"
                    },
                    {
                      "$ref": "#/components/schemas/ReviewDoesNotBelongToVolcano"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/user/register": {
      "post": {
        "tags": ["Authentication"],
        "description": "Creates a new user account. A request body containing the user to be registered must be sent.",
        "requestBody": {
          "description": "An object containing the email and password of the user to be registered.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "mike@gmail.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User created"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": "true"
                    },
                    "message": {
                      "type": "string",
                      "example": "Request body incomplete, both email and password are required"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "User already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": "true"
                    },
                    "message": {
                      "type": "string",
                      "example": "User already exists"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/login": {
      "post": {
        "description": "Log in to an existing user account. A request body containing the user credentials must be sent.",
        "tags": ["Authentication"],
        "requestBody": {
          "description": "The credentials of the user to log in.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "mike@gmail.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Log in successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "example": "ajsonwebtoken"
                    },
                    "token_type": {
                      "type": "string",
                      "example": "Bearer"
                    },
                    "expires_in": {
                      "type": "number",
                      "example": 86400
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid log in request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": "true"
                    },
                    "message": {
                      "type": "string",
                      "example": "Request body incomplete, both email and password are required"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Log in failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": "true"
                    },
                    "message": {
                      "type": "string",
                      "example": "Incorrect email or password"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/{email}/profile": {
      "get": {
        "description": "Returns an object containing a user's profile information. The path parameter (email) is required and must be an email that has been registered. This route returns additional information if the user is authenticated. To be authenticated, a valid JWT token must be sent in the header of the request. To test this using Swagger, click the green 'Authorize' button at the top of this page to enter your JWT token. A JWT token can be obtained by logging in.",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "description": "Email address of a registered user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": ["Profile"],
        "responses": {
          "200": {
            "description": "An object containing email, firstName, lastName, address (authenticated only) and dob (authenticated only) properties. An example object for an authenticated request is shown below. If no profile information has been entered for the user via the profile PUT request route, all returned values except email are expected to be null. Click on 'Schema' below to see a response example for an unauthenticated request.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AuthenticatedProfile"
                    },
                    {
                      "$ref": "#/components/schemas/PublicProfile"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Click on 'Schema' below to see the possible error responses.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/JwtTokenExpired"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidJwtToken"
                    },
                    {
                      "$ref": "#/components/schemas/AuthorizationHeaderMalformed"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserNotFound"
                }
              }
            }
          }
        }
      },
      "put": {
        "description": "Updates a user's profile information. The path parameter (email) is required and must be an email that has been registered. A request body containing the user's profile information must be sent. This route returns an object containing the user's updated profile information. This route also requires the user to be authenticated - a valid JWT token must be sent in the header of the request. To test this route using Swagger, click the green 'Authorize' button at the top of this page to enter your JWT token. A JWT token can be obtained by logging in.",
        "requestBody": {
          "description": "An object containing the user's firstName, lastName, dob and address. firstName, lastName and address must be strings. dob must be a validate date string in the past matching the format YYYY-MM-DD. All key/value pairs are required.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "type": "string",
                    "example": "Michael"
                  },
                  "lastName": {
                    "type": "string",
                    "example": "Jordan"
                  },
                  "dob": {
                    "type": "string",
                    "example": "1963-02-17"
                  },
                  "address": {
                    "type": "string",
                    "example": "123 Fake Street, Springfield"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "description": "Email address of a registered user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": ["Profile"],
        "responses": {
          "200": {
            "description": "An object containing the user's updated profile information. The object should contain email, firstName, lastName, dob and address properties. An example object is shown below.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedProfile"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Click on 'Schema' below to see the possible error responses.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/RequestBodyIncompleteProfile"
                    },
                    {
                      "$ref": "#/components/schemas/UserProfileUpdateFailure"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Click on 'Schema' below to see the possible error responses.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AuthorizationHeaderNotFound"
                    },
                    {
                      "$ref": "#/components/schemas/JwtTokenExpired"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidJwtToken"
                    },
                    {
                      "$ref": "#/components/schemas/AuthorizationHeaderMalformed"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. Email address associated with JWT token is not the same as email provided in path parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Forbidden"
                }
              }
            }
          }
        }
      }
    },
    "/me": {
      "get": {
        "tags": ["Administration"],
        "description": "A route to assist in automating some of the marking process for this assignment.",
        "responses": {
          "200": {
            "description": "An object containing your name and student number.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "Logan Janssen"
                    },
                    "student_number": {
                      "type": "string",
                      "example": "n10797831"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/brewcoffee": {
      "get": {
        "summary": "New!",
        "tags": ["Coffee"],
        "description": "A route to brew a cup of coffee.",
        "responses": {
          "418": {
            "description": "I'm a teapot",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeapotError"
                }
              }
            }
          }
        }
      }
    }
  }
}
